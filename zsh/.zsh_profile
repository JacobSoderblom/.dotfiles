export XDG_CONFIG_HOME=$HOME/.config
VIM="nvim"

alias vim="nvim"

export CC="clang-12"
export CXX="clang++-12"
export PYTHONBREAKPOINT="pudb.set_trace"
export GOPATH=$HOME/go
export GIT_EDITOR=$VIM
export NF_IDFILE=$HOME/.idfile
export N_PREFIX="$HOME/.local/n"
export DOTFILES=$HOME/.dotfiles

catr() {
    tail -n "+$1" $3 | head -n "$(($2 - $1 + 1))"
}

validateYaml() {
    python -c 'import yaml,sys;yaml.safe_load(sys.stdin)' < $1
}

goWork() {
  git config --local core.sshCommand "ssh -F ~/.ssh/work"
  git config --local user.email "253415@skane.se"
}

goPrivate() {
  git config --global core.sshCommand "ssh -F ~/.ssh/private"
  git config --global user.email "jacob.soderblom@protonmail.com"
}

goPrivateLocal() {
  git config --local core.sshCommand "ssh -F ~/.ssh/private"
  git config --local user.email "jacob.soderblom@protonmail.com"
}

addThrottle() {
    local kbs="kbps"
    echo $kbs
    echo "About to throttle to $1 $kbs"
    echo "sudo tc qdisc add dev wlp59s0 handle 1: root htb default 11"
    echo "sudo tc class add dev wlp59s0 parent 1: classid 1:1 htb rate $1$kbs"
    echo "sudo tc class add dev wlp59s0 parent 1:1 classid 1:11 htb rate $1$kbs"
    sudo tc qdisc add dev wlp59s0 handle 1: root htb default 11
    sudo tc class add dev wlp59s0 parent 1: classid 1:1 htb rate $1$kbs
    sudo tc class add dev wlp59s0 parent 1:1 classid 1:11 htb rate $1$kbs
}

removeThrottle() {
    sudo tc qdisc del dev wlp59s0 root
}

cat1Line() {
    cat $1 | tr -d "\n"
}

ioloop() {
    FIFO=$(mktemp -u /tmp/ioloop_$$_XXXXXX ) &&
    trap "rm -f $FIFO" EXIT &&
    mkfifo $FIFO &&
    ( : <$FIFO & ) &&    # avoid deadlock on opening pipe
    exec >$FIFO <$FIFO
}

eslintify() {
    cat $1 > /tmp/file_to_eslint
    npx eslint
}

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Function to upgrade pnpm
pnpm_upgrade() {
  local pnpm_path
  pnpm_path=$(which pnpm)

  if [ -z "$pnpm_path" ]; then
    echo "pnpm is not installed. Installing..."
  else
    echo "Found pnpm at: $pnpm_path"
    echo "Removing pnpm..."
    rm -rf "$pnpm_path"
    if which pnpm > /dev/null 2>&1; then
      echo "Failed to remove pnpm."
      return 1
    else
      echo "pnpm successfully removed."
    fi
  fi

  PNPM_HOME="$HOME/Library/pnpm"
  if [ ! -d "$PNPM_HOME" ]; then
    echo "Creating PNPM_HOME directory..."
    mkdir -p "$PNPM_HOME"
  fi

  echo "Installing pnpm..."
  curl -fsSL https://get.pnpm.io/install.sh | sh -
  source ~/.zshrc

  if pnpm -v; then
    echo "pnpm has been successfully installed or upgraded."
  else
    echo "pnpm installation failed."
    return 1
  fi
}

ssh-add-with-passphrase () {
    key_file="$(mktemp)"
    echo "${1}" > ${key_file}
    chmod 600 ${key_file}
    if [ -z "${2}" ]; then
        ssh-add ${key_file}
    else
        expect << EOF
            spawn ssh-add ${key_file}
            expect "Enter passphrase"
            send "${2}\n"
            expect eof
EOF
    fi 
    rm -rf ${key_file}
}

ssh-add-bw-keys () {
    bw_status=$(bw status | jq -r '.status')
    if [[ ${bw_status} != 'unlocked' ]]; then 
        echo "Bitwarden Vault: ${bw_status}"
        echo "Please login:"
        bw --regenerate-session-key
    fi
    bw sync &> /dev/null
    bw list items | jq -c '.[] | select(.fields[0].name=="ssh" and .attachments != null)' | while read key; do
        local key_pw=$(printf '%q' $(jq -r '.login.password' <<< "${key}"))
        local key_id=$(jq -r '.id' <<< "${key}")
        local key_file_name=$(jq -r '.attachments[].fileName' <<< "${key}")
        local id_ssh=$(bw get attachment ${key_file_name} --itemid ${key_id} --raw)
        ssh-add-with-passphrase "${id_ssh}" "${key_pw}" &> /dev/null
    done
}

ssh () {
    echo "Temporary adding keys from bitwarden..."
    ssh_exec=$(sh -c "which ssh")
    ssh-add-bw-keys
    nohup bash -c 'sleep 10; ssh-add -D &> /dev/null' </dev/null >/dev/null 2>&1 &
    disown
    echo -e '\e[1A\e[KSuccessfull!'
    ${ssh_exec} $@
}
